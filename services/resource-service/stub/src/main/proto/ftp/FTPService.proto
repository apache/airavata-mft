/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

option java_multiple_files = true;
package org.apache.airavata.mft.resource.service.ftp;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "ftp/FTPStorage.proto";
import "ftp/FTPResource.proto";

service FTPResourceService {

    rpc getFTPStorage (org.apache.airavata.mft.resource.stubs.ftp.storage.FTPStorageGetRequest) returns
                                                        (org.apache.airavata.mft.resource.stubs.ftp.storage.FTPStorage) {
        option (google.api.http) = {
           get: "/v1.0/resource/ftp/storage"
        };
    }

    rpc createFTPStorage (org.apache.airavata.mft.resource.stubs.ftp.storage.FTPStorageCreateRequest) returns
                                                        (org.apache.airavata.mft.resource.stubs.ftp.storage.FTPStorage) {
        option (google.api.http) = {
           post: "/v1.0/resource/ftp/storage"
        };
    }

    rpc updateFTPStorage (org.apache.airavata.mft.resource.stubs.ftp.storage.FTPStorageUpdateRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
           put: "/v1.0/resource/ftp/storage"
        };
    }

    rpc deleteFTPStorage (org.apache.airavata.mft.resource.stubs.ftp.storage.FTPStorageDeleteRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
           delete: "/v1.0/resource/ftp/storage"
        };
    }

    rpc getFTPResource (org.apache.airavata.mft.resource.stubs.ftp.resource.FTPResourceGetRequest) returns
                                                    (org.apache.airavata.mft.resource.stubs.ftp.resource.FTPResource) {
        option (google.api.http) = {
           get: "/v1.0/resource/ftp"
        };
    }

    rpc createFTPResource (org.apache.airavata.mft.resource.stubs.ftp.resource.FTPResourceCreateRequest) returns
                                                    (org.apache.airavata.mft.resource.stubs.ftp.resource.FTPResource) {
        option (google.api.http) = {
           post: "/v1.0/resource/ftp"
        };
    }

    rpc updateFTPResource (org.apache.airavata.mft.resource.stubs.ftp.resource.FTPResourceUpdateRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
           put: "/v1.0/resource/ftp"
        };
    }

    rpc deleteFTPResource (org.apache.airavata.mft.resource.stubs.ftp.resource.FTPResourceDeleteRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
           delete: "/v1.0/resource/ftp"
        };
    }
}