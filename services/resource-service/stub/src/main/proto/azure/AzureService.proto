/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

option java_multiple_files = true;
package org.apache.airavata.mft.resource.service.azure;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "azure/AzureResource.proto";
import "azure/AzureStorage.proto";

service AzureResourceService {
    
    // Storage

    rpc getAzureStorage (org.apache.airavata.mft.resource.stubs.azure.storage.AzureStorageGetRequest) returns
    (org.apache.airavata.mft.resource.stubs.azure.storage.AzureStorage) {
        option (google.api.http) = {
           get: "/v1.0/resource/azure/storage"
        };
    }

    rpc createAzureStorage (org.apache.airavata.mft.resource.stubs.azure.storage.AzureStorageCreateRequest) returns
    (org.apache.airavata.mft.resource.stubs.azure.storage.AzureStorage) {
        option (google.api.http) = {
           post: "/v1.0/resource/azure/storage"
        };
    }

    rpc updateAzureStorage (org.apache.airavata.mft.resource.stubs.azure.storage.AzureStorageUpdateRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
           put: "/v1.0/resource/azure/storage"
        };
    }

    rpc deleteAzureStorage (org.apache.airavata.mft.resource.stubs.azure.storage.AzureStorageDeleteRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
           delete: "/v1.0/resource/azure/storage"
        };
    }

    // Resource

    rpc getAzureResource (org.apache.airavata.mft.resource.stubs.azure.resource.AzureResourceGetRequest) returns
                                            (org.apache.airavata.mft.resource.stubs.azure.resource.AzureResource) {
        option (google.api.http) = {
           get: "/v1.0/resource/azure"
        };
    }

    rpc createAzureResource (org.apache.airavata.mft.resource.stubs.azure.resource.AzureResourceCreateRequest) returns
                                            (org.apache.airavata.mft.resource.stubs.azure.resource.AzureResource) {
        option (google.api.http) = {
           post: "/v1.0/resource/azure"
        };
    }

    rpc updateAzureResource (org.apache.airavata.mft.resource.stubs.azure.resource.AzureResourceUpdateRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
           put: "/v1.0/resource/azure"
        };
    }

    rpc deleteAzureResource (org.apache.airavata.mft.resource.stubs.azure.resource.AzureResourceDeleteRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
           delete: "/v1.0/resource/azure"
        };
    }
}